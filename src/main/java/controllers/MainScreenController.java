package controllers;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Scene;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

import javafx.scene.Parent;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.stage.Stage;
import javafx.scene.Node;
import models.Inventory;
import models.Part;
import models.Product;

/**

 This class is the main controller for the inventory management system.

 It handles all the user interface events and manages the data models.
 */
public class MainScreenController implements Initializable {

    public Button PartsAddButton;
    @FXML private TableView<Part> mainScreenPartsTable;

    @FXML private TextField PartsSearchField;
    @FXML private TextField ProductsSearchField;
    @FXML private TableView<Product> mainScreenProductsTable;
    @FXML private TableColumn<Product, Integer> productIDCol;
    @FXML private TableColumn<Product, String> productNameCol;
    @FXML private TableColumn<Product, Integer> productInventoryCol;
    @FXML private TableColumn<Product, Double> productPriceCol;

    @FXML private TableColumn<Part, Integer> partIDCol;
    @FXML private TableColumn<Part, String> partNameCol;
    @FXML private TableColumn<Part, Integer> partInventoryCol;
    @FXML private TableColumn<Part, Double> partPriceCol;


    /**
     Handles the event when the user clicks the Parts Add button.
     It loads the Add Part view and displays it on the main stage.
     @param event The ActionEvent object generated by the user clicking the button.
     */

    @FXML
    void OnPartsAddButtonClick(ActionEvent event) throws IOException {
        Parent addParts = FXMLLoader.load(getClass().getResource("/views/AddPart.fxml"));
        Scene scene = new Scene(addParts);
        Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();
        window.setScene(scene);
        window.show();
    }

    /**
     This method exits the application on user click.
     @param actionEvent The ActionEvent object generated by the user clicking the button.
     */
    public void OnExitButtonClick(ActionEvent actionEvent) {
        Platform.exit();
    }

    /**
     Handles the event when the user clicks the Parts Search button.
     It searches the parts data based on the search query and updates the parts table view with the filtered data.
     @param actionEvent The ActionEvent object generated by the user clicking the button.
     */
    public void OnPartsSearchButton(ActionEvent actionEvent) {
        String query = PartsSearchField.getText().toLowerCase();

        // Clear any existing selection
        mainScreenPartsTable.getSelectionModel().clearSelection();

        // Filter the parts data based on the search query
        ObservableList<Part> filteredData = FXCollections.observableArrayList();
        boolean foundById = false; // Flag to keep track if a matching ID is found
        for (Part part : Inventory.getAllParts()) {
            if (part.getName().toLowerCase().contains(query)) {
                filteredData.add(part);
            }
            if (Integer.toString(part.getId()).equals(query)) {
                filteredData.add(part);
                foundById = true; // Set the flag to true if a matching ID is found
            }
        }

        if (foundById) {
            // Update the tableview with the filtered data
            mainScreenPartsTable.setItems(filteredData);
        } else {
            // Show a warning dialog box if no match is found for the search query
            if (filteredData.isEmpty()) {
                Alert alert = new Alert(Alert.AlertType.WARNING);
                alert.setTitle("No Part Found");
                alert.setHeaderText(null);
                alert.setContentText(query + " was not found, please search again.");
                alert.showAndWait();
            } else {
                // Update the tableview with the filtered data
                mainScreenPartsTable.setItems(filteredData);
            }
        }
    }


    public void onPartSearchAction(ActionEvent actionEvent) {
    }

    /**
     Handles the event when the user clicks the Parts Modify button.
     It loads the Modify Part view and displays it on the main stage with the selected part data.
     @param actionEvent The ActionEvent object generated by the user clicking the button.
     */
    public void OnPartsModifyButtonClick(ActionEvent actionEvent) throws IOException {
        Part selectedPart = mainScreenPartsTable.getSelectionModel().getSelectedItem();

        if (selectedPart == null) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("No Part Selected");
            alert.setHeaderText(null);
            alert.setContentText("Please select a part to modify.");
            alert.showAndWait();
            return;
        }

        FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/ModifyPart.fxml"));
        Parent modifyPart = loader.load();
        ModifyPartController controller = loader.getController();
        controller.initialize(null, null, selectedPart);
        Scene scene = new Scene(modifyPart);
        Stage window = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        window.setScene(scene);
        window.show();
    }

    /**
     Handles the delete button click for parts. If a part is selected, a confirmation dialog is shown to the user
     to confirm the deletion. If the user confirms, the selected part is deleted from the inventory.
     If no part is selected, a warning dialog is shown to the user.
     @param actionEvent the event that triggered the method call
     */
    public void OnPartsDeleteButtonClick(ActionEvent actionEvent) {
        Part selectedPart = mainScreenPartsTable.getSelectionModel().getSelectedItem();

        if (selectedPart == null) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("No Part Selected");
            alert.setHeaderText(null);
            alert.setContentText("Please select a part to delete.");
            alert.showAndWait();
            return;
        }

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation");
        alert.setHeaderText("Confirm Deletion");
        alert.setContentText("Do you want to delete this part?");
        Optional<ButtonType> result = alert.showAndWait();

        if (result.isPresent() && result.get() == ButtonType.OK) {
            Inventory.deletePart(selectedPart);
        }
    }

    /**
     Handles the search button click for products. The products table is filtered based on the search query entered.
     in the search field. If the search query matches a product name, the table is filtered to show only the matching products.
     If the search query matches a product ID, the table is filtered to show all products and the matching product is selected.
     If no match is found, the table is empty.
     @param actionEvent the event that triggered the method call
     */
    public void OnProductsSearchButtonClick(ActionEvent actionEvent) {
        String query = ProductsSearchField.getText().toLowerCase();

        // Clear any existing selection
        mainScreenProductsTable.getSelectionModel().clearSelection();

        // Filter the parts data based on the search query
        ObservableList<Product> filteredData = FXCollections.observableArrayList();
        boolean foundById = false; // Flag to keep track if a matching ID is found
        for (Product product : Inventory.getAllProducts()) {
            if (product.getName().toLowerCase().contains(query)) {
                filteredData.add(product);
            }
            if (Integer.toString(product.getId()).equals(query)) {
                filteredData.add(product);
                foundById = true; // Set the flag to true if a matching ID is found
            }
        }

        if (foundById) {
            // Update the tableview with the filtered data
            mainScreenProductsTable.setItems(filteredData);
        } else {
            //Show dialog box if no search is found for the query
            if (filteredData.isEmpty()) {
                Alert alert = new Alert(Alert.AlertType.WARNING);
                alert.setTitle("No Product Found");
                alert.setHeaderText(null);
                alert.setContentText(query + " was not found, please search again.");
                alert.showAndWait();
            } else {
                // Update the tableview with the filtered data
                mainScreenProductsTable.setItems(filteredData);
            }
        }
    }


    /**
     Handles the delete button click for products. If a product is selected, a confirmation dialog is shown to the user
     to confirm the deletion. If the user confirms, the selected product is deleted from the inventory.
     If no product is selected, a warning dialog is shown to the user.
     @param actionEvent the event that triggered the method call
     */
    public void OnProductsDeleteButtonClick(ActionEvent actionEvent) {
        Product selectedProduct = mainScreenProductsTable.getSelectionModel().getSelectedItem();

        if (selectedProduct == null) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("No Product Selected");
            alert.setHeaderText(null);
            alert.setContentText("Please select a product to delete.");
            alert.showAndWait();
            return;
        }

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation");
        alert.setHeaderText("Confirm Deletion");
        alert.setContentText("Do you want to delete this product?");
        Optional<ButtonType> result = alert.showAndWait();

        if (result.isPresent() && result.get() == ButtonType.OK) {
            Inventory.deleteProduct(selectedProduct);
        }
    }

    /**
     Handles the modify button click for products. If a product is selected, the Modify Product view is shown
     with the selected product's information pre-populated in the fields. If no product is selected, a warning dialog
     is shown to the user.
     @param actionEvent the event that triggered the method call
     */
    public void OnProductsModifyButtonClick(ActionEvent actionEvent) throws IOException {
        Product selectedProduct = mainScreenProductsTable.getSelectionModel().getSelectedItem();

        if (selectedProduct == null) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("No Product Selected");
            alert.setHeaderText(null);
            alert.setContentText("Please select a product to modify.");
            alert.showAndWait();
            return;
        }

        FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/ModifyProduct.fxml"));
        Parent modifyProduct = loader.load();
        ModifyProductController controller = loader.getController();
        controller.initialize(null, null, selectedProduct);
        Scene scene = new Scene(modifyProduct);
        Stage window = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        window.setScene(scene);
        window.show();
    }

    /**
     Handles the add button click for products. The add product view is shown to the user.
     @param actionEvent the event that triggered the method call
     */
    public void OnProductsAddButtonClick(ActionEvent actionEvent) throws IOException {
        Parent cancel = FXMLLoader.load(getClass().getResource("/views/AddProduct.fxml"));
        Scene scene = new Scene(cancel);
        Stage window = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        window.setScene(scene);
        window.show();
    }

    /**
     Initializes the controller and sets up the parts and products tables with the relevant data and columns.
     Also sets up the search fields with the relevant event listeners. Called automatically by JavaFX when the view is loaded.
     @param url the URL of the FXML file
     @param resourceBundle the resource bundle associated with the FXML file
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        mainScreenPartsTable.setItems(Inventory.getAllParts());
        partIDCol.setCellValueFactory(new PropertyValueFactory<>("id"));
        partNameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
        partInventoryCol.setCellValueFactory(new PropertyValueFactory<>("stock"));
        partPriceCol.setCellValueFactory(new PropertyValueFactory<>("price"));

        mainScreenProductsTable.setItems(Inventory.getAllProducts());
        productIDCol.setCellValueFactory(new PropertyValueFactory<>("id"));
        productNameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
        productInventoryCol.setCellValueFactory(new PropertyValueFactory<>("stock"));
        productPriceCol.setCellValueFactory(new PropertyValueFactory<>("price"));

        PartsSearchField.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.ENTER) {
                OnPartsSearchButton(new ActionEvent());
            }
        });

        ProductsSearchField.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.ENTER) {
                OnProductsSearchButtonClick(new ActionEvent());
            }
        });

        System.out.println("I am initialized! Hello there.");
    }


}